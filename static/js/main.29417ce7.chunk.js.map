{"version":3,"sources":["components/TopMenu/TopMenu.jsx","components/InfoCard/InfoCard.jsx","assets/images/linux_penguin.jpg","assets/images/emre_portrait.jpeg","App.jsx","serviceWorker.js","index.js"],"names":["TopMenu","Navbar","bg","variant","expand","Container","className","Brand","defaultBgColor","InfoCard","props","useState","cardHovered","toggleHoverState","headerFlag","header","titleFlag","title","textFlag","children","footerFlag","footer","Card","style","backgroundColor","onMouseEnter","onMouseLeave","Header","as","Body","Title","Text","Footer","App","id","background","wallpaper","overflow","fluid","Row","Col","lg","span","offset","href","target","rel","Image","src","emrePortrait","rounded","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29417ce7.chunk.js","sourcesContent":["\nimport { Container, Navbar } from \"react-bootstrap\";\n\n\nconst TopMenu = () => {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n            <Container className=\"d-flex justify-content-center\">\n                <Navbar.Brand className=\"text-light\">Mehmet Arif Emre Åžen</Navbar.Brand>\n            </Container>\n        </Navbar>\n    )\n}\n\nexport default TopMenu; ","\nimport { useState } from \"react\"\nimport { Card } from \"react-bootstrap\"\nimport './InfoCard.css'\n\n// other constnats\n// const hoveredBgColor = \"218, 219, 210\"\nconst defaultBgColor = \"228, 229, 220\"\nconst hoveredBgColor = defaultBgColor\n\n// Component\nconst InfoCard = (props) => {\n\n    // states\n    const [cardHovered, toggleHoverState] = useState(false);\n\n    // flags\n    const headerFlag = props.header && true\n    const titleFlag = props.title && true\n    const textFlag = props.children && true\n    const footerFlag = props.footer && true\n\n    // render\n    return (\n        <Card\n            className=\"info-card my-4 border-dark shadow\"\n            style={{\n                backgroundColor: `rgba(${cardHovered ?  hoveredBgColor: defaultBgColor}, 0.8)`\n            }}\n            onMouseEnter={() => toggleHoverState(true)}\n            onMouseLeave={() => toggleHoverState(false)}\n        >\n            {headerFlag && (\n                <Card.Header className=\"bg-dark\" as=\"h5\">\n                    {props.header}\n                </Card.Header>\n            )}\n            {(titleFlag || textFlag) && (\n                <Card.Body className=\"bg-transparent\">\n                    {titleFlag && <Card.Title>{props.title}</Card.Title>}\n                    {textFlag && <Card.Text>{props.children}</Card.Text>}\n                </Card.Body>\n            )}\n            {footerFlag && (\n                <Card.Footer className=\"bg-dark\">\n                    {props.footer}\n                </Card.Footer>\n            )}\n        </Card>\n    )\n}\n\nexport default InfoCard;","export default __webpack_public_path__ + \"static/media/linux_penguin.8fba1c0a.jpg\";","export default __webpack_public_path__ + \"static/media/emre_portrait.af48ca45.jpeg\";","import React from 'react';\r\n\r\nimport { Container, Col, Row, Image } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport './App.css';\r\n\r\nimport { TopMenu, InfoCard } from './components'\r\nimport { wallpaper, emrePortrait } from './assets';\r\n\r\nfunction App() {\r\n  return (\r\n    <div id=\"app\" className=\"vh-100\" style={{\r\n      background: `url(${wallpaper})`\r\n    }}>\r\n      <div id=\"overlay\" className=\"vh-100\" style={{\r\n        backgroundColor: \"rgba(30, 30, 30, 0.7)\",\r\n        overflow: \"auto\"\r\n      }}>\r\n        <header>\r\n          <TopMenu />\r\n        </header>\r\n        <main className=\"py-4\">\r\n          <Container fluid>\r\n            <Row>\r\n              <Col lg={{\r\n                span: 4,\r\n                offset: 4\r\n              }}>\r\n                <InfoCard\r\n                  header=\"About Me\"\r\n                  footer={(\r\n                    <>\r\n                      <a\r\n                        className='d-block text-center'\r\n                        href='https://maemresen.github.io/curriculum-vitae/cv_mehmet_arif_emre_sen.pdf'\r\n                        target='_blank'\r\n                        rel='noopener noreferrer'\r\n                      >\r\n                        <b>CV Link</b>\r\n                      </a>\r\n                    </>\r\n                  )}\r\n                >\r\n                  <Row>\r\n                    <Col lg=\"12\" className=\"align-self-center\">\r\n                      <Image src={emrePortrait} rounded fluid className=\"border border-dark\" style={{\r\n                        maxWidth: \"200px\"\r\n                      }} />\r\n                      <div className=\"border-top border-dark mt-4 pt-4\">\r\n                        I am an entrepreneur who wants to learn new technologies and use them to make things easier.\r\n                        My life goal is having my own job and creating a software community that everyone can get benefit from.\r\n                        I have deep interest to Object Oriented Paradigm\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                </InfoCard>\r\n              </Col>\r\n\r\n              <Col lg={{\r\n                span: 6\r\n              }}>\r\n                <InfoCard\r\n                  header=\"Hobby Projects\"\r\n                >\r\n                  I am an entrepreneur who wants to learn new technologies and use them to make things easier.\r\n                  <br />\r\n                  My life goal is having my own job and creating a software community that everyone can get benefit from.\r\n                  <br />\r\n                  I have deep interest to Object Oriented Paradigm\r\n                  <hr />\r\n                  <a\r\n                    className='d-block text-center'\r\n                    href='https://maemresen.github.io/curriculum-vitae/cv_mehmet_arif_emre_sen.pdf'\r\n                    target='_blank'\r\n                    rel='noopener noreferrer'\r\n                  >\r\n                    <b>CV Link</b>\r\n                  </a>\r\n                </InfoCard>\r\n              </Col>\r\n              <Col lg={{\r\n                span: 6\r\n              }}>\r\n                <InfoCard\r\n                  header=\"Contact Me\"\r\n                >\r\n                  I am an entrepreneur who wants to learn new technologies and use them to make things easier.\r\n                  <br />\r\n                  My life goal is having my own job and creating a software community that everyone can get benefit from.\r\n                  <br />\r\n                  I have deep interest to Object Oriented Paradigm\r\n                  <hr />\r\n                  <a\r\n                    className='d-block text-center'\r\n                    href='https://maemresen.github.io/curriculum-vitae/cv_mehmet_arif_emre_sen.pdf'\r\n                    target='_blank'\r\n                    rel='noopener noreferrer'\r\n                  >\r\n                    <b>CV Link</b>\r\n                  </a>\r\n                </InfoCard>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </main>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}