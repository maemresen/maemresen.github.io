{"version":3,"sources":["components/TopMenu/index.jsx","assets/images/linux_penguin.jpg","App.jsx","serviceWorker.js","index.js"],"names":["TopMenu","props","Navbar","bg","variant","expand","Container","className","Brand","App","id","style","background","wallpaper","Col","md","Row","Card","Header","as","Body","Title","Text","Button","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAceA,EAVC,SAACC,GACb,OACI,cAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,KAAxC,SACI,cAACC,EAAA,EAAD,CAAWC,UAAU,gCAArB,SACI,cAACL,EAAA,EAAOM,MAAR,6CCRD,G,MAAA,IAA0B,2CC+C1BC,MArCf,WACE,OACE,sBAAKC,GAAG,MAAMH,UAAU,SAASI,MAAO,CACtCC,WAAW,OAAD,OAASC,EAAT,MADZ,UAGE,iCACE,cAAC,EAAD,MAEF,iCACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,eAACC,EAAA,EAAD,WACE,cAACF,EAAA,EAAD,CAAKC,GAAG,IAAR,SACE,qBAAKR,UAAU,OAAf,SACE,eAACU,EAAA,EAAD,CAAMV,UAAU,UAAhB,UACE,cAACU,EAAA,EAAKC,OAAN,CAAaX,UAAU,aAAaY,GAAG,KAAvC,sBACA,eAACF,EAAA,EAAKG,KAAN,CAAWb,UAAU,WAArB,UACE,cAACU,EAAA,EAAKI,MAAN,sCACA,cAACJ,EAAA,EAAKK,KAAN,qFAGA,cAACC,EAAA,EAAD,CAAQnB,QAAQ,UAAhB,oCAKR,cAACU,EAAA,EAAD,CAAKC,GAAG,WAIZ,cAACT,EAAA,EAAD,CAAWkB,OAAK,IArBlB,WCNcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5f9b8db6.chunk.js","sourcesContent":["\nimport { Container, Navbar } from \"react-bootstrap\";\n\n\nconst TopMenu = (props) => {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n            <Container className=\"d-flex justify-content-center\">\n                <Navbar.Brand>Mehmet Arif Emre Åžen</Navbar.Brand>\n            </Container>\n        </Navbar>\n    )\n}\n\nexport default TopMenu; ","export default __webpack_public_path__ + \"static/media/linux_penguin.8fba1c0a.jpg\";","import React from 'react';\r\n\r\nimport { Container, Button, Col, Row, Card } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport { TopMenu } from './components'\r\n\r\nimport './App.css';\r\nimport { wallpaper } from './assets';\r\n\r\nfunction App() {\r\n  return (\r\n    <div id=\"app\" className=\"vh-100\" style={{\r\n      background: `url(${wallpaper})`,\r\n    }}>\r\n      <header>\r\n        <TopMenu />\r\n      </header>\r\n      <main>\r\n        <Col md=\"12\">\r\n          <Row>\r\n            <Col md=\"6\">\r\n              <div className=\"py-2\">\r\n                <Card className=\"bg-dark\">\r\n                  <Card.Header className=\"text-white\" as=\"h5\">Featured</Card.Header>\r\n                  <Card.Body className=\"bg-light\">\r\n                    <Card.Title>Special title treatment</Card.Title>\r\n                    <Card.Text>\r\n                      With supporting text below as a natural lead-in to additional content.\r\n                  </Card.Text>\r\n                    <Button variant=\"primary\">Go somewhere</Button>\r\n                  </Card.Body>\r\n                </Card>\r\n              </div>\r\n            </Col>\r\n            <Col md=\"6\">\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n        <Container fluid>\r\n        </Container>.\r\n        </main>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}