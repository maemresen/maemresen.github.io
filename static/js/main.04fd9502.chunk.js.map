{"version":3,"sources":["components/navTerminal/navTerminalSlice.jsx","components/navTerminal/NavTerminal.jsx","components/topMenu/TopMenu.jsx","pages/Home.jsx","pages/Cv.jsx","App.jsx","app/store.js","serviceWorker.js","index.js","components/topMenu/TopMenu.module.scss"],"names":["navTerminalSlice","createSlice","name","initialState","value","reducers","toggle","state","actions","getVisibility","visibility","NavTerminal","props","useSelector","terminal","React","createRef","history","useHistory","commands","cd","description","usage","fn","keys","Object","arguments","length","page","push","className","style","height","display","ref","welcomeMessage","promptLabel","TopMenu","dispatch","useDispatch","Navbar","bg","variant","expand","Container","Brand","Toggle","aria-controls","Collapse","id","Nav","exact","to","activeClassName","onClick","icon","faTerminal","size","color","Home","Cv","useState","loaded","load","Col","md","Spinner","animation","src","title","frameBorder","onLoad","width","href","App","path","component","configureStore","reducer","navTerminalReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.04fd9502.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const navTerminalSlice = createSlice({\n    name: 'visibility',\n    initialState: {\n        value: false,\n    },\n    reducers: {\n        toggle: state => {\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n            // doesn't actually mutate the state because it uses the Immer library,\n            // which detects changes to a \"draft state\" and produces a brand new\n            // immutable state based off those changes\n            state.value = !state.value\n        },\n    },\n});\n\nexport const { toggle } = navTerminalSlice.actions\n\nexport const getVisibility = state => state.visibility.value;\nexport default navTerminalSlice.reducer;","import React from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport { useSelector } from 'react-redux';\n\nimport Terminal from 'react-console-emulator'\n\nimport { getVisibility } from './navTerminalSlice'\n\nconst NavTerminal = (props) => {\n    const visibility = useSelector(getVisibility)\n\n    const terminal = React.createRef()\n    const history = useHistory()\n\n    const commands = {\n        cd: {\n            description: 'Navigating between pages.',\n            usage: 'cd home|cv',\n            fn: function () {\n                const keys = Object.keys(arguments);\n                if (keys.length !== 1) {\n                    return \"Invalid. Usage: cd home|cv\"\n                }\n                const page = arguments[keys[0]];\n                if (page === \"home\") {\n                    history.push(`/`)\n                } else if (page === \"cv\") {\n                    history.push(`/cv`)\n                } else {\n                    return \"cd home|cv\"\n                }\n                return `${page} loading`\n            }\n        }\n    }\n\n    return (\n        <div className={props.className} style={{\n            height: \"300px\",\n            display: (visibility ? \"block\" : \"none\")\n        }}>\n            <Terminal\n                ref={terminal}\n                commands={commands}\n                welcomeMessage={'Welcome to white rabbit hole!'}\n                promptLabel={'maemresen@mywebsite:~$'}\n            />\n        </div>\n    )\n}\n\nexport default NavTerminal;","import { NavLink } from \"react-router-dom\";\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Container, Navbar, Nav } from \"react-bootstrap\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTerminal } from \"@fortawesome/free-solid-svg-icons\";\n\nimport './TopMenu.module.scss'\n\nimport { toggle, getVisibility } from '../navTerminal/navTerminalSlice'\n\nconst TopMenu = (props) => {\n    const visibility = useSelector(getVisibility);\n    const dispatch = useDispatch();\n\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" className=\"text-center\">\n            <Container>\n                <Navbar.Brand>\n                    Mehmet Arif Emre Åžen\n            </Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"ml-auto\">\n                        <NavLink exact={true} to=\"/\" activeClassName=\"active\" className=\"nav-link\">\n                            Home\n                </NavLink>\n                        <NavLink to=\"/cv\" activeClassName=\"active\" className=\"nav-link\">\n                            CV\n                </NavLink>\n                        <div\n                            className={`d-inline-block text-secondary`}\n                            onClick={() => dispatch(toggle())}\n                        >\n                            <FontAwesomeIcon\n                                icon={faTerminal}\n                                className=\"ml-3 mt-1\"\n                                size=\"2x\"\n                                style={{\n                                    color: (visibility ? \"green\" : \"red\")\n                                }}\n                            />\n                        </div>\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    )\n}\n\nexport default TopMenu;","const Home = () => {\n\n    return (\n        <div>\n            home\n        </div>\n\n    )\n}\n\nexport default Home;","import { useState } from \"react\";\n\nimport { Col, Spinner } from \"react-bootstrap\";\n\n\nconst Cv = () => {\n\n    const [loaded, load] = useState(false);\n\n\n    return (\n        <>\n            {!loaded && (\n                <Col md=\"12\" className=\"text-center\">\n                    <Spinner animation=\"border\" className=\"text-center\" />\n                </Col>\n            )}\n            <iframe\n                src=\"https://maemresen.github.io/resume/cv_mehmet_arif_emre_sen.pdf\"\n                title=\"title\"\n                frameBorder={(loaded) ? \"1\" : \"0\"}\n                onLoad={() => load(true)}\n                style={{\n                    width: \"100%\",\n                    height: \"90vh\",\n                }}>\n                Presss me: <a href=\"https://maemresen.github.io/resume/cv_mehmet_arif_emre_sen.pdf\">Download PDF</a>\n            </iframe>\n        </>\n    )\n};\n\nexport default Cv;","import React from 'react';\r\n\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport NavTerminal from \"./components/navTerminal/NavTerminal\";\r\n\r\nimport TopMenu from './components/topMenu/TopMenu';\r\n\r\nimport Home from \"./pages/Home\";\r\nimport Cv from \"./pages/Cv\";\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <header>\r\n        <TopMenu />\r\n      </header>\r\n      <main className=\"mt-4\">\r\n        <Container>\r\n          <NavTerminal className=\"mb-3\" />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Home}></Route>\r\n            <Route exact path=\"/cv\" component={Cv}></Route>\r\n          </Switch>\r\n        </Container>\r\n      </main>\r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport navTerminalReducer from \"../components/navTerminal/navTerminalSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    visibility: navTerminalReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav-link\":\"TopMenu_nav-link__2msFT\",\"active\":\"TopMenu_active__2sUT1\"};"],"sourceRoot":""}